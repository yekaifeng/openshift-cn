apiVersion: v1
kind: Template
metadata:
  name: maven-pipeline-ft-rest-service-2
  annotations:
    openshift.io/display-name: maven-pipeline-ft-rest-service
    tags: "spring,demo"
    iconClass: icon-spring
    description: "maven-pipeline-ft-rest-service-2 template"
    openshift.io/provider-display-name: KennethYe
parameters:
- name: APP_NAME
  description: The name assigned to all of the application objects defined in this template.
  displayName: Application Name
  required: true
  value: ft-rest-service-2
- name: GIT_SOURCE_URL
  description: The source URL for the application
  displayName: Source URL
  required: true
  value: https://github.com/yekaifeng/ft-rest-service.git
- name: GIT_SOURCE_REF
  description: The source Ref for the application
  displayName: Source Ref
  required: true
  value: master
- description: Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.
  displayName: GitHub Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GITHUB_WEBHOOK_SECRET
  required: true
- description: A secret string used to configure the Generic webhook.
  displayName: Generic Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GENERIC_WEBHOOK_SECRET
  required: true
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec: {}
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: java-centos-openjdk8-jdk
  spec:
    tags:
    - annotations:
        supports: openjdk8:1.6.3,java
        tags: builder,openjdk8,java
        version: "1.6.3"
      from:
        kind: DockerImage
        name: fabric8/java-centos-openjdk8-jdk:1.6.3
      name: "1.6.3"
    - annotations:
        supports: openjdk8,java
        tags: builder,openjdk8,java
      from:
        kind: ImageStreamTag
        name: "1.6.3"
      name: latest
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "${NAME}", "namespace": "", "kind": "DeploymentConfig"}]'
    creationTimestamp: null
    labels:
      name: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          try {
             timeout(time: 20, unit: 'MINUTES') {
                def appName="${APP_NAME}"
                def project=""
                def tagVersionSubfix = ""
                node {
                  stage("Initialize") {
                    project = env.PROJECT_NAME
                  }
                }

                node("maven") {
                  stage("Checkout") {
                    git url: "${GIT_SOURCE_URL}", branch: "${GIT_SOURCE_REF}"
                  }
                  stage("Build JAR") {
                    sh "mvn clean package -U -Dmaven.test.skip=true"
                    tagVersionSubfix = getTagFromPom()
                    sh "cp -f target/gs-rest-service-${tagVersionSubfix}.jar target/gs-rest-service.jar"
                    stash name:"jar", includes:"target/gs-rest-service.jar"
                  }
                }

                node {
                  stage("Build Image") {
                    unstash name:"jar"
                    sh "start-build ${appName}-docker --from-file=target/gs-rest-service.jar -n ${project}"
                    openshiftVerifyBuild bldCfg: "${appName}-docker", namespace: project, waitTime: '20', waitUnit: 'min'
                  }
                  stage("Deploy") {
                    openshiftDeploy deploymentConfig: appName, namespace: project
                  }
                }
             }
          } catch (err) {
             echo "in catch block"
             echo "Caught: ${err}"
             currentBuild.result = 'FAILURE'
             throw err
          }

          def getTagFromPom() {
              return "${readMavenPom().getVersion()}"
          }
      type: JenkinsPipeline
    triggers:
    - github:
        secret: "${GITHUB_WEBHOOK_SECRET}"
      type: GitHub
    - generic:
        secret: "${GENERIC_WEBHOOK_SECRET}"
      type: Generic
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: ${APP_NAME}-docker
    name: ${APP_NAME}-docker
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APP_NAME}:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      dockerfile: |-
        FROM java-centos-openjdk8-jdk
        MAINTAINER Kennethy <yekaifeng@tom.com>
        ENV JAVA_OPTIONS="-Xmx2048m -Xms1024m -XX:NewRatio=1 -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 \
        -XX:+UseCMSInitiatingOccupancyOnly -XX:ReservedCodeCacheSize=128M -XX:ParallelGCThreads=2 \
        -XX:+ExplicitGCInvokesConcurrent -Duser.timezone=Asia/Shanghai -Djava.security.egd=file:/dev/./urandom \
        ${APP_OPTS} ${JMX_OPTS} ${GCLOG_OPTS}"
        ENV JAVA_APP_JAR="gs-rest-service.jar"
        USER root
        EXPOSE 8800
        COPY gs-rest-service.jar /deployments/${JAVA_APP_JAR}
        COPY versionfile /deployments
        LABEL org.app="gs-rest-service"
        CMD $STI_SCRIPTS_PATH/run
        RUN chown -R jboss /deployments/${JAVA_APP_JAR} \
          && chmod -R "g+rwX" /deployments/${JAVA_APP_JAR}\
          && chown -R jboss:root /deployments/${JAVA_APP_JAR}
        USER jboss
        WORKDIR ${JAVA_APP_DIR}
        ENTRYPOINT [ "/deployments/run-java.sh", "--spring.profiles.active=${SPRING_PROFILES_ACTIVE}" ]
      binary:
        asFile: gs-rest-service.jar
      type: Docker
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: java-centos-openjdk8-jdk:latest
      type: Docker
    triggers: []
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    replicas: 1
    selector:
      app: ${APP_NAME}
      deploymentconfig: ${APP_NAME}
    strategy:
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: ${APP_NAME}
          deploymentconfig: ${APP_NAME}
      spec:
        containers:
        - image: ${APP_NAME}:latest
          imagePullPolicy: Always
          name: ${APP_NAME}
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "dev"
          ports:
          - name: http
            containerPort: 8800
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8800
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8800
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
            timeoutSeconds: 5
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APP_NAME}
        from:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      type: ImageChange
  status: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    ports:
    - name: 8800-tcp
      port: 8800
      protocol: TCP
      targetPort: 8800
    selector:
      app: ${APP_NAME}
      deploymentconfig: ${APP_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Route
  metadata:
    name: ${APP_NAME}
    labels:
      app: ${APP_NAME}
  spec:
    to:
      kind: Service
      name: ${APP_NAME}
      weight: 100
    port:
      targetPort: 8800-tcp
    wildcardPolicy: None
